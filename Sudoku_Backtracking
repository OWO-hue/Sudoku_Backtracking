# Sudoku.py
import pygame
import time

pygame.font.init()

screen = pygame.display.set_mode((500,600))
pygame.display.set_caption("Sudoku")

x = 0
y = 0
dif = 500 // 9
val = 0
grid =[
        [7, 8, 0, 4, 0, 0, 1, 2, 0],
        [6, 0, 0, 0, 7, 5, 0, 0, 9],
        [0, 0, 0, 6, 0, 1, 0, 7, 8],
        [0, 0, 7, 0, 4, 0, 2, 6, 0],
        [0, 0, 1, 0, 5, 0, 9, 3, 0],
        [9, 0, 4, 0, 6, 0, 0, 0, 5],
        [0, 7, 0, 3, 0, 0, 0, 1, 2],
        [1, 2, 0, 0, 0, 7, 4, 0, 0],
        [0, 4, 9, 2, 0, 6, 0, 0, 7]
    ]
font1 = pygame.font.SysFont("comicsans", 40)
font2 = pygame.font.SysFont("comicsans", 20)

def get_cord(pos):
    global x
    x = pos[0]//dif
    global y
    y = pos[1]//dif

def draw_box():
    for i in range(2):
        pygame.draw.line(screen, (255, 0, 0), (x * dif, (y + i)*dif), (x * dif + dif, (y + i)*dif), 4)
        pygame.draw.line(screen, (255, 0, 0), ( (x + i)* dif, y * dif ), ((x + i) * dif, y * dif + dif), 4)  

def draw():
    screen.fill((255,255,255))

    text0 = font1.render("Press 'Enter' to Solve", 1, (0,0,0))
    screen.blit(text0, (40, 520))


    
    
    for i in range (9):
        for j in range (9):
            if grid[i][j]!= 0:
                pygame.draw.rect(screen, (200,100,200), (i * dif, j * dif, dif+1, dif+1))

                
                text1 = font1.render(str(grid[i][j]), 1, (0, 0, 0))
                screen.blit(text1, (i * dif + 15, j * dif))
     
    for i in range(10):
        if i % 3 == 0 :
            thick = 4
        else:
            thick = 1
        pygame.draw.line(screen, (0, 0, 0), (0, i * dif), (495, i * dif), thick)
        pygame.draw.line(screen, (0, 0, 0), (i * dif, 0), (i * dif, 495), thick) 


def result():
    pygame.draw.rect(screen, (255, 255, 255), (0, 520, 500, dif))
    text1 = font1.render("FINISHED", 1, (0, 0, 0))
    screen.blit(text1, (40, 520)) 

def valid(m, i, j, val):
    for it in range(9):
        if m[i][it]== val:
            return False
        if m[it][j]== val:
            return False
    it = i//3
    jt = j//3
    for i in range(it * 3, it * 3 + 3):
        for j in range (jt * 3, jt * 3 + 3):
            if m[i][j]== val:
                return False
    return True
 
def solve(grid, i, j):
     
    while grid[i][j]!= 0:
        if i<8:
            i+= 1
        elif i == 8 and j<8:
            i = 0
            j+= 1
        elif i == 8 and j == 8:
            return True 
    for it in range(1, 10):
        if valid(grid, i, j, it)== True:
            grid[i][j]= it
            global x, y
            x = i
            y = j
            draw()
            draw_box()
            pygame.display.update()
            pygame.time.delay(20)
            if solve(grid, i, j)== True:
                return True
            else:
                grid[i][j]= 0

         
            draw()
            draw_box()
            pygame.display.update()
            pygame.time.delay(50)   
    return False 

run = True
complete = 0
while run:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            run = False
        if event.type == pygame.MOUSEBUTTONDOWN:
                global pos
                pos = pygame.mouse.get_pos()
                get_cord(pos)
        if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_RETURN:
                    solve(grid,0,0)
                    complete = 1
                if event.key == pygame.K_LEFT:
                    x-= 1
                    flag1 = 1
                if event.key == pygame.K_RIGHT:
                    x+= 1
                    flag1 = 1
                if event.key == pygame.K_UP:
                    y-= 1
                    flag1 = 1
                if event.key == pygame.K_DOWN:
                    y+= 1
                    flag1 = 1  
 
    if complete == 0:
        draw()
    else:
        result()
    draw_box()
    pygame.display.update()
    

        
